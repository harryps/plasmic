// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vHW8PexQ9CvaEbwGp1Pgn6
// Component: 8ekmXy00nHs
import * as React from "react"

import { Link, GatsbyLinkProps as LinkProps } from "gatsby"

import * as p from "@plasmicapp/react-web"
import * as ph from "@plasmicapp/host"

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"

import "@plasmicapp/react-web/lib/plasmic.css"

import * as projectcss from "./plasmic_mosaico.module.css" // plasmic-import: vHW8PexQ9CvaEbwGp1Pgn6/projectcss
import * as sty from "./PlasmicDashboardHeader.module.css" // plasmic-import: 8ekmXy00nHs/css

import EllipseIcon from "./icons/PlasmicIcon__Ellipse" // plasmic-import: jZe9gVLYYC/icon
import Group2Icon from "./icons/PlasmicIcon__Group2" // plasmic-import: Qe7x4B2VeF/icon
import Group3Icon from "./icons/PlasmicIcon__Group3" // plasmic-import: 8FsbJpDOfk/icon
import Group4Icon from "./icons/PlasmicIcon__Group4" // plasmic-import: h8tHWqtpzK/icon
import Group15Icon from "./icons/PlasmicIcon__Group15" // plasmic-import: Pz_BdPol3p/icon
import LargeCircleQuestionOutlineIcon from "./icons/PlasmicIcon__LargeCircleQuestionOutline" // plasmic-import: ClPH6uYObK/icon
import ellipse2CxEvsvBfUh from "./images/ellipse2.svg" // plasmic-import: cxEvsvBfUh/picture

export type PlasmicDashboardHeader__VariantMembers = {}

export type PlasmicDashboardHeader__VariantsArgs = {}
type VariantPropType = keyof PlasmicDashboardHeader__VariantsArgs
export const PlasmicDashboardHeader__VariantProps = new Array<VariantPropType>()

export type PlasmicDashboardHeader__ArgsType = {}
type ArgPropType = keyof PlasmicDashboardHeader__ArgsType
export const PlasmicDashboardHeader__ArgProps = new Array<ArgPropType>()

export type PlasmicDashboardHeader__OverridesType = {
  root?: p.Flex<"div">
  olaNayaraCawsey?: p.Flex<"div">
  olaNayaraCawsey2?: p.Flex<"div">
  headerActions?: p.Flex<"div">
  chatTopIcon?: p.Flex<"div">
  largeChat?: p.Flex<"div">
  group2157?: p.Flex<"div">
  group?: p.Flex<"div">
  group2?: p.Flex<"div">
  group3?: p.Flex<"div">
  group4?: p.Flex<"div">
  number?: p.Flex<"div">
  notificationNumberBg?: p.Flex<"div">
  notificationTopIcon?: p.Flex<"div">
  largeBell?: p.Flex<"div">
  number2?: p.Flex<"div">
  notificationNumberBg2?: p.Flex<"div">
  helpTopIcon?: p.Flex<"div">
  avatar?: p.Flex<"div">
  img?: p.Flex<"img">
  image7?: p.Flex<"div">
}

export interface DefaultDashboardHeaderProps {
  className?: string
}

export const defaultDashboardHeader__Args: Partial<PlasmicDashboardHeader__ArgsType> =
  {}

function PlasmicDashboardHeader__RenderFunc(props: {
  variants: PlasmicDashboardHeader__VariantsArgs
  args: PlasmicDashboardHeader__ArgsType
  overrides: PlasmicDashboardHeader__OverridesType

  forNode?: string
}) {
  const { variants, overrides, forNode } = props
  const args = Object.assign({}, defaultDashboardHeader__Args, props.args)
  const $props = args
  const $ctx = ph.useDataEnv?.() || {}

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox___4W6HO)}>
        <div
          data-plasmic-name={"olaNayaraCawsey"}
          data-plasmic-override={overrides.olaNayaraCawsey}
          className={classNames(projectcss.all, sty.olaNayaraCawsey)}
        >
          <div
            data-plasmic-name={"olaNayaraCawsey2"}
            data-plasmic-override={overrides.olaNayaraCawsey2}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.olaNayaraCawsey2
            )}
          >
            <p.Trans>{"Hello, Daisy Cawsey"}</p.Trans>
          </div>
        </div>
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"headerActions"}
        data-plasmic-override={overrides.headerActions}
        hasGap={true}
        className={classNames(projectcss.all, sty.headerActions)}
      >
        {false ? (
          <div
            data-plasmic-name={"chatTopIcon"}
            data-plasmic-override={overrides.chatTopIcon}
            className={classNames(projectcss.all, sty.chatTopIcon)}
          >
            <EllipseIcon
              className={classNames(projectcss.all, sty.svg__krA1S)}
              role={"img"}
            />

            <div
              data-plasmic-name={"largeChat"}
              data-plasmic-override={overrides.largeChat}
              className={classNames(projectcss.all, sty.largeChat)}
            >
              <div
                data-plasmic-name={"group2157"}
                data-plasmic-override={overrides.group2157}
                className={classNames(projectcss.all, sty.group2157)}
              >
                <div
                  data-plasmic-name={"group"}
                  data-plasmic-override={overrides.group}
                  className={classNames(projectcss.all, sty.group)}
                >
                  <Group2Icon
                    className={classNames(projectcss.all, sty.svg__oWfJw)}
                    role={"img"}
                  />
                </div>

                <div
                  data-plasmic-name={"group2"}
                  data-plasmic-override={overrides.group2}
                  className={classNames(projectcss.all, sty.group2)}
                >
                  <Group3Icon
                    className={classNames(projectcss.all, sty.svg__lkWGt)}
                    role={"img"}
                  />
                </div>

                <div
                  data-plasmic-name={"group3"}
                  data-plasmic-override={overrides.group3}
                  className={classNames(projectcss.all, sty.group3)}
                >
                  <Group3Icon
                    className={classNames(projectcss.all, sty.svg__bZsan)}
                    role={"img"}
                  />
                </div>

                <div
                  data-plasmic-name={"group4"}
                  data-plasmic-override={overrides.group4}
                  className={classNames(projectcss.all, sty.group4)}
                >
                  <Group4Icon
                    className={classNames(projectcss.all, sty.svg__np5Qk)}
                    role={"img"}
                  />
                </div>
              </div>
            </div>

            <div
              data-plasmic-name={"number"}
              data-plasmic-override={overrides.number}
              className={classNames(projectcss.all, sty.number)}
            >
              <div
                data-plasmic-name={"notificationNumberBg"}
                data-plasmic-override={overrides.notificationNumberBg}
                className={classNames(projectcss.all, sty.notificationNumberBg)}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__u0CoM
                )}
              >
                <p.Trans>{"1"}</p.Trans>
              </div>
            </div>
          </div>
        ) : null}
        {false ? (
          <div
            data-plasmic-name={"notificationTopIcon"}
            data-plasmic-override={overrides.notificationTopIcon}
            className={classNames(projectcss.all, sty.notificationTopIcon)}
          >
            <EllipseIcon
              className={classNames(projectcss.all, sty.svg___8X2My)}
              role={"img"}
            />

            <div
              data-plasmic-name={"largeBell"}
              data-plasmic-override={overrides.largeBell}
              className={classNames(projectcss.all, sty.largeBell)}
            >
              <Group15Icon
                className={classNames(projectcss.all, sty.svg___8VPg)}
                role={"img"}
              />
            </div>

            <div
              data-plasmic-name={"number2"}
              data-plasmic-override={overrides.number2}
              className={classNames(projectcss.all, sty.number2)}
            >
              <div
                data-plasmic-name={"notificationNumberBg2"}
                data-plasmic-override={overrides.notificationNumberBg2}
                className={classNames(
                  projectcss.all,
                  sty.notificationNumberBg2
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ecIj
                )}
              >
                <p.Trans>{"1"}</p.Trans>
              </div>
            </div>
          </div>
        ) : null}

        <div
          data-plasmic-name={"helpTopIcon"}
          data-plasmic-override={overrides.helpTopIcon}
          className={classNames(projectcss.all, sty.helpTopIcon)}
        >
          <EllipseIcon
            className={classNames(projectcss.all, sty.svg__ySbtO)}
            role={"img"}
          />

          <LargeCircleQuestionOutlineIcon
            className={classNames(projectcss.all, sty.svg__gojJt)}
            role={"img"}
          />
        </div>

        <div
          data-plasmic-name={"avatar"}
          data-plasmic-override={overrides.avatar}
          className={classNames(projectcss.all, sty.avatar)}
        >
          <img
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(projectcss.all, projectcss.img, sty.img)}
            loading={"lazy" as const}
            src={ellipse2CxEvsvBfUh}
          />

          <div
            data-plasmic-name={"image7"}
            data-plasmic-override={overrides.image7}
            className={classNames(projectcss.all, sty.image7)}
          />
        </div>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null
}

const PlasmicDescendants = {
  root: [
    "root",
    "olaNayaraCawsey",
    "olaNayaraCawsey2",
    "headerActions",
    "chatTopIcon",
    "largeChat",
    "group2157",
    "group",
    "group2",
    "group3",
    "group4",
    "number",
    "notificationNumberBg",
    "notificationTopIcon",
    "largeBell",
    "number2",
    "notificationNumberBg2",
    "helpTopIcon",
    "avatar",
    "img",
    "image7",
  ],
  olaNayaraCawsey: ["olaNayaraCawsey", "olaNayaraCawsey2"],
  olaNayaraCawsey2: ["olaNayaraCawsey2"],
  headerActions: [
    "headerActions",
    "chatTopIcon",
    "largeChat",
    "group2157",
    "group",
    "group2",
    "group3",
    "group4",
    "number",
    "notificationNumberBg",
    "notificationTopIcon",
    "largeBell",
    "number2",
    "notificationNumberBg2",
    "helpTopIcon",
    "avatar",
    "img",
    "image7",
  ],
  chatTopIcon: [
    "chatTopIcon",
    "largeChat",
    "group2157",
    "group",
    "group2",
    "group3",
    "group4",
    "number",
    "notificationNumberBg",
  ],
  largeChat: ["largeChat", "group2157", "group", "group2", "group3", "group4"],
  group2157: ["group2157", "group", "group2", "group3", "group4"],
  group: ["group"],
  group2: ["group2"],
  group3: ["group3"],
  group4: ["group4"],
  number: ["number", "notificationNumberBg"],
  notificationNumberBg: ["notificationNumberBg"],
  notificationTopIcon: [
    "notificationTopIcon",
    "largeBell",
    "number2",
    "notificationNumberBg2",
  ],
  largeBell: ["largeBell"],
  number2: ["number2", "notificationNumberBg2"],
  notificationNumberBg2: ["notificationNumberBg2"],
  helpTopIcon: ["helpTopIcon"],
  avatar: ["avatar", "img", "image7"],
  img: ["img"],
  image7: ["image7"],
} as const
type NodeNameType = keyof typeof PlasmicDescendants
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number]
type NodeDefaultElementType = {
  root: "div"
  olaNayaraCawsey: "div"
  olaNayaraCawsey2: "div"
  headerActions: "div"
  chatTopIcon: "div"
  largeChat: "div"
  group2157: "div"
  group: "div"
  group2: "div"
  group3: "div"
  group4: "div"
  number: "div"
  notificationNumberBg: "div"
  notificationTopIcon: "div"
  largeBell: "div"
  number2: "div"
  notificationNumberBg2: "div"
  helpTopIcon: "div"
  avatar: "div"
  img: "img"
  image7: "div"
}

type ReservedPropsType = "variants" | "args" | "overrides"
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDashboardHeader__OverridesType,
  DescendantsType<T>
>
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDashboardHeader__VariantsArgs
    args?: PlasmicDashboardHeader__ArgsType
    overrides?: NodeOverridesType<T>
  } & Omit<PlasmicDashboardHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDashboardHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDashboardHeader__ArgProps,
      internalVariantPropNames: PlasmicDashboardHeader__VariantProps,
    })

    return PlasmicDashboardHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicDashboardHeader"
  } else {
    func.displayName = `PlasmicDashboardHeader.${nodeName}`
  }
  return func
}

export const PlasmicDashboardHeader = Object.assign(
  // Top-level PlasmicDashboardHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    olaNayaraCawsey: makeNodeComponent("olaNayaraCawsey"),
    olaNayaraCawsey2: makeNodeComponent("olaNayaraCawsey2"),
    headerActions: makeNodeComponent("headerActions"),
    chatTopIcon: makeNodeComponent("chatTopIcon"),
    largeChat: makeNodeComponent("largeChat"),
    group2157: makeNodeComponent("group2157"),
    group: makeNodeComponent("group"),
    group2: makeNodeComponent("group2"),
    group3: makeNodeComponent("group3"),
    group4: makeNodeComponent("group4"),
    number: makeNodeComponent("number"),
    notificationNumberBg: makeNodeComponent("notificationNumberBg"),
    notificationTopIcon: makeNodeComponent("notificationTopIcon"),
    largeBell: makeNodeComponent("largeBell"),
    number2: makeNodeComponent("number2"),
    notificationNumberBg2: makeNodeComponent("notificationNumberBg2"),
    helpTopIcon: makeNodeComponent("helpTopIcon"),
    avatar: makeNodeComponent("avatar"),
    img: makeNodeComponent("img"),
    image7: makeNodeComponent("image7"),

    // Metadata about props expected for PlasmicDashboardHeader
    internalVariantProps: PlasmicDashboardHeader__VariantProps,
    internalArgProps: PlasmicDashboardHeader__ArgProps,
  }
)

export default PlasmicDashboardHeader
/* prettier-ignore-end */
