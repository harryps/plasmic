// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vHW8PexQ9CvaEbwGp1Pgn6
// Component: wV8UN81fACq
import * as React from "react"

import { Link, GatsbyLinkProps as LinkProps } from "gatsby"

import * as p from "@plasmicapp/react-web"
import * as ph from "@plasmicapp/host"

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"

import "@plasmicapp/react-web/lib/plasmic.css"

import * as projectcss from "./plasmic_mosaico.module.css" // plasmic-import: vHW8PexQ9CvaEbwGp1Pgn6/projectcss
import * as sty from "./PlasmicLessonCard.module.css" // plasmic-import: wV8UN81fACq/css

import LargeCalendarIcon from "./icons/PlasmicIcon__LargeCalendar" // plasmic-import: 3x7w478lro/icon
import SmallArrowRightIcon from "./icons/PlasmicIcon__SmallArrowRight" // plasmic-import: E1daVl593h/icon

export type PlasmicLessonCard__VariantMembers = {}

export type PlasmicLessonCard__VariantsArgs = {}
type VariantPropType = keyof PlasmicLessonCard__VariantsArgs
export const PlasmicLessonCard__VariantProps = new Array<VariantPropType>()

export type PlasmicLessonCard__ArgsType = {}
type ArgPropType = keyof PlasmicLessonCard__ArgsType
export const PlasmicLessonCard__ArgProps = new Array<ArgPropType>()

export type PlasmicLessonCard__OverridesType = {
  root?: p.Flex<"div">
  header?: p.Flex<"div">
  titles?: p.Flex<"div">
  dynamic?: p.Flex<"div">
  dynamic2?: p.Flex<"div">
  content?: p.Flex<"div">
  dateTime?: p.Flex<"div">
  dateGroup?: p.Flex<"div">
  homeNextLessonCardDate?: p.Flex<"div">
  tag?: p.Flex<"div">
  timeGroup?: p.Flex<"div">
  homeNextLessonCardTime?: p.Flex<"div">
  tag2?: p.Flex<"div">
  activitiesGroup?: p.Flex<"div">
  homeNextLessonCardActivities?: p.Flex<"div">
  dynamic3?: p.Flex<"div">
  actions?: p.Flex<"div">
  buttonDetails?: p.Flex<"div">
  link?: p.Flex<"div">
  button?: p.Flex<"div">
  homenextLessonCardactionButton?: p.Flex<"div">
}

export interface DefaultLessonCardProps {
  className?: string
}

export const defaultLessonCard__Args: Partial<PlasmicLessonCard__ArgsType> = {}

function PlasmicLessonCard__RenderFunc(props: {
  variants: PlasmicLessonCard__VariantsArgs
  args: PlasmicLessonCard__ArgsType
  overrides: PlasmicLessonCard__OverridesType

  forNode?: string
}) {
  const { variants, overrides, forNode } = props
  const args = Object.assign({}, defaultLessonCard__Args, props.args)
  const $props = args
  const $ctx = ph.useDataEnv?.() || {}

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"header"}
        data-plasmic-override={overrides.header}
        hasGap={true}
        className={classNames(projectcss.all, sty.header)}
      >
        <LargeCalendarIcon
          className={classNames(projectcss.all, sty.svg__xxK7H)}
          role={"img"}
        />

        <div
          data-plasmic-name={"titles"}
          data-plasmic-override={overrides.titles}
          className={classNames(projectcss.all, sty.titles)}
        >
          <div
            data-plasmic-name={"dynamic"}
            data-plasmic-override={overrides.dynamic}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.dynamic
            )}
          >
            <p.Trans>{"Project name"}</p.Trans>
          </div>

          <div
            data-plasmic-name={"dynamic2"}
            data-plasmic-override={overrides.dynamic2}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.dynamic2
            )}
          >
            <p.Trans>{"Lesson name"}</p.Trans>
          </div>
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"content"}
        data-plasmic-override={overrides.content}
        hasGap={true}
        className={classNames(projectcss.all, sty.content)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"dateTime"}
          data-plasmic-override={overrides.dateTime}
          hasGap={true}
          className={classNames(projectcss.all, sty.dateTime)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"dateGroup"}
            data-plasmic-override={overrides.dateGroup}
            hasGap={true}
            className={classNames(projectcss.all, sty.dateGroup)}
          >
            <div
              data-plasmic-name={"homeNextLessonCardDate"}
              data-plasmic-override={overrides.homeNextLessonCardDate}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.homeNextLessonCardDate
              )}
            >
              <p.Trans>{"DATE"}</p.Trans>
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"tag"}
              data-plasmic-override={overrides.tag}
              hasGap={true}
              className={classNames(projectcss.all, sty.tag)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sHZcw
                )}
              >
                <p.Trans>{"05-05"}</p.Trans>
              </div>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"timeGroup"}
            data-plasmic-override={overrides.timeGroup}
            hasGap={true}
            className={classNames(projectcss.all, sty.timeGroup)}
          >
            <div
              data-plasmic-name={"homeNextLessonCardTime"}
              data-plasmic-override={overrides.homeNextLessonCardTime}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.homeNextLessonCardTime
              )}
            >
              <p.Trans>{"TIME"}</p.Trans>
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"tag2"}
              data-plasmic-override={overrides.tag2}
              hasGap={true}
              className={classNames(projectcss.all, sty.tag2)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__eNqpK
                )}
              >
                <p.Trans>{"11:38 AM â€“ 11:59 PM"}</p.Trans>
              </div>
            </p.Stack>
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"activitiesGroup"}
          data-plasmic-override={overrides.activitiesGroup}
          hasGap={true}
          className={classNames(projectcss.all, sty.activitiesGroup)}
        >
          <div
            data-plasmic-name={"homeNextLessonCardActivities"}
            data-plasmic-override={overrides.homeNextLessonCardActivities}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.homeNextLessonCardActivities
            )}
          >
            <p.Trans>{"ACTIVITIES  (3)"}</p.Trans>
          </div>

          <div
            data-plasmic-name={"dynamic3"}
            data-plasmic-override={overrides.dynamic3}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.dynamic3
            )}
          >
            <p.Trans>{"Lorem ipsum"}</p.Trans>
          </div>
        </p.Stack>
      </p.Stack>

      <div
        data-plasmic-name={"actions"}
        data-plasmic-override={overrides.actions}
        className={classNames(projectcss.all, sty.actions)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"buttonDetails"}
          data-plasmic-override={overrides.buttonDetails}
          hasGap={true}
          className={classNames(projectcss.all, sty.buttonDetails)}
        >
          <div
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.link
            )}
          >
            <p.Trans>{"Details"}</p.Trans>
          </div>

          <SmallArrowRightIcon
            className={classNames(projectcss.all, sty.svg__rtyRn)}
            role={"img"}
          />
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          hasGap={true}
          className={classNames(projectcss.all, sty.button)}
        >
          <div
            data-plasmic-name={"homenextLessonCardactionButton"}
            data-plasmic-override={overrides.homenextLessonCardactionButton}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.homenextLessonCardactionButton
            )}
          >
            <p.Trans>{"Journal"}</p.Trans>
          </div>
        </p.Stack>
      </div>
    </div>
  ) as React.ReactElement | null
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "titles",
    "dynamic",
    "dynamic2",
    "content",
    "dateTime",
    "dateGroup",
    "homeNextLessonCardDate",
    "tag",
    "timeGroup",
    "homeNextLessonCardTime",
    "tag2",
    "activitiesGroup",
    "homeNextLessonCardActivities",
    "dynamic3",
    "actions",
    "buttonDetails",
    "link",
    "button",
    "homenextLessonCardactionButton",
  ],
  header: ["header", "titles", "dynamic", "dynamic2"],
  titles: ["titles", "dynamic", "dynamic2"],
  dynamic: ["dynamic"],
  dynamic2: ["dynamic2"],
  content: [
    "content",
    "dateTime",
    "dateGroup",
    "homeNextLessonCardDate",
    "tag",
    "timeGroup",
    "homeNextLessonCardTime",
    "tag2",
    "activitiesGroup",
    "homeNextLessonCardActivities",
    "dynamic3",
  ],
  dateTime: [
    "dateTime",
    "dateGroup",
    "homeNextLessonCardDate",
    "tag",
    "timeGroup",
    "homeNextLessonCardTime",
    "tag2",
  ],
  dateGroup: ["dateGroup", "homeNextLessonCardDate", "tag"],
  homeNextLessonCardDate: ["homeNextLessonCardDate"],
  tag: ["tag"],
  timeGroup: ["timeGroup", "homeNextLessonCardTime", "tag2"],
  homeNextLessonCardTime: ["homeNextLessonCardTime"],
  tag2: ["tag2"],
  activitiesGroup: [
    "activitiesGroup",
    "homeNextLessonCardActivities",
    "dynamic3",
  ],
  homeNextLessonCardActivities: ["homeNextLessonCardActivities"],
  dynamic3: ["dynamic3"],
  actions: [
    "actions",
    "buttonDetails",
    "link",
    "button",
    "homenextLessonCardactionButton",
  ],
  buttonDetails: ["buttonDetails", "link"],
  link: ["link"],
  button: ["button", "homenextLessonCardactionButton"],
  homenextLessonCardactionButton: ["homenextLessonCardactionButton"],
} as const
type NodeNameType = keyof typeof PlasmicDescendants
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number]
type NodeDefaultElementType = {
  root: "div"
  header: "div"
  titles: "div"
  dynamic: "div"
  dynamic2: "div"
  content: "div"
  dateTime: "div"
  dateGroup: "div"
  homeNextLessonCardDate: "div"
  tag: "div"
  timeGroup: "div"
  homeNextLessonCardTime: "div"
  tag2: "div"
  activitiesGroup: "div"
  homeNextLessonCardActivities: "div"
  dynamic3: "div"
  actions: "div"
  buttonDetails: "div"
  link: "div"
  button: "div"
  homenextLessonCardactionButton: "div"
}

type ReservedPropsType = "variants" | "args" | "overrides"
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLessonCard__OverridesType,
  DescendantsType<T>
>
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLessonCard__VariantsArgs
    args?: PlasmicLessonCard__ArgsType
    overrides?: NodeOverridesType<T>
  } & Omit<PlasmicLessonCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLessonCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLessonCard__ArgProps,
      internalVariantPropNames: PlasmicLessonCard__VariantProps,
    })

    return PlasmicLessonCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicLessonCard"
  } else {
    func.displayName = `PlasmicLessonCard.${nodeName}`
  }
  return func
}

export const PlasmicLessonCard = Object.assign(
  // Top-level PlasmicLessonCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    titles: makeNodeComponent("titles"),
    dynamic: makeNodeComponent("dynamic"),
    dynamic2: makeNodeComponent("dynamic2"),
    content: makeNodeComponent("content"),
    dateTime: makeNodeComponent("dateTime"),
    dateGroup: makeNodeComponent("dateGroup"),
    homeNextLessonCardDate: makeNodeComponent("homeNextLessonCardDate"),
    tag: makeNodeComponent("tag"),
    timeGroup: makeNodeComponent("timeGroup"),
    homeNextLessonCardTime: makeNodeComponent("homeNextLessonCardTime"),
    tag2: makeNodeComponent("tag2"),
    activitiesGroup: makeNodeComponent("activitiesGroup"),
    homeNextLessonCardActivities: makeNodeComponent(
      "homeNextLessonCardActivities"
    ),
    dynamic3: makeNodeComponent("dynamic3"),
    actions: makeNodeComponent("actions"),
    buttonDetails: makeNodeComponent("buttonDetails"),
    link: makeNodeComponent("link"),
    button: makeNodeComponent("button"),
    homenextLessonCardactionButton: makeNodeComponent(
      "homenextLessonCardactionButton"
    ),

    // Metadata about props expected for PlasmicLessonCard
    internalVariantProps: PlasmicLessonCard__VariantProps,
    internalArgProps: PlasmicLessonCard__ArgProps,
  }
)

export default PlasmicLessonCard
/* prettier-ignore-end */
